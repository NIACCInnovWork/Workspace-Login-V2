"""
NIACC Innovation Workspace Login V2
This file defines the 'Visit' class
Author: Anthony Riesen
"""
import datetime as dt

from ws_login_domain import User

from typing import Optional, List
from dataclasses import dataclass

class Visit:
    """
    Class that defines the data structure of the visit object

    Constructor for the 'visit' object
    TODO Determine if visit_category is needed, if it is a string, or if it is 
    a enum

    The majority of logic in this class is mostly validating a date range. 
    Potentally could this be extracted out into a timeperiod class? Does the 
    python datetime lib already have this?

    :param visit_id: Unique identifier for each visit, generated by the database
    :param user_id: Foreign Key that connects the visit to the user who is visiting
    :param start_time: Timestamp for the login time of the visit
    :param end_time: Timestamp for the logout time of the visit
    """
    def __init__(
            self,
            visit_id: int,
            user_id: int,
            start_time: dt.datetime,
            end_time: Optional[dt.datetime],
    ):
        if end_time and start_time > end_time:
            raise ValueError("Start date before end date")

        self.visit_id = visit_id
        self.user_id = user_id
        self._start_time = start_time
        self._end_time = end_time

    @property
    def start_time(self):
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: dt.datetime):
        if self.end_time and start_time > self.end_time:
            raise ValueError("Start date before end date")
        self._start_time = start_time

    @property
    def end_time(self):
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: Optional[dt.datetime]):
        if end_time and self.start_time > end_time:
            raise ValueError("Start date before end date")
        self._end_time = end_time

    def is_ended(self) -> bool:
        return self.end_time is not None

