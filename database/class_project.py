"""
NIACC Innovation Workspace Login V2
This file defines the 'Project' class and the associated 'Project_Type' enum.
This class differs from the straight database in that it also contains a list of materials used
Author: Anthony Riesen
"""
from enum import Enum

import mysql.connector


class ProjectType(Enum):
    """
    Enum that defines the possible project types.
    """
    Personal = 1
    Class = 2
    Entrepreneurial = 3
    Business = 4


class Project:
    """
    Class that defines the data structure of the 'Project' object
    """
    def __init__(self, project_id: int, project_name: str, project_description: str, project_type: ProjectType):
        """
        Constructor for 'Project' class
        :param project_id: Unique identifier for each user, generated by the database.
        :param project_name: Unique name for projects @Todo - Perhaps remove unique qualifier
        :param project_description: Description of the project that includes additional details that help distinguish
        this particular project from any other
        :param project_type: Enum value that defines this project's type out of the available options
        """
        self.project_id = project_id
        self.project_name = project_name
        self.project_description = project_description
        self.project_type = project_type

    def __str__(self):
        return f"Project: projectID: {self.project_id}, Name: {self.project_name}," \
               f"Project Description: {self.project_description}, Project Type: {self.project_type}"

    @staticmethod
    def factory(project_name: str, project_description: str, project_type: ProjectType):
        """
        Build a Project object without a project_id; the project_id is set to 0 as a placeholder
        :param project_name: Name for Project
        :param project_description: Description of the project that includes additional details that help distinguish
        this particular project from any other
        :param project_type: Enum value that defines this project's type out of the available options
        :return:
        """
        project = Project(0, project_name, project_description, project_type)

        return project

    @staticmethod
    def create(database: mysql.connector, project_name: str, project_description: str, project_type: ProjectType):
        """
        Method to create a new project in the database.  Static method so that it can be called independent of a
        specific object.  Calls out to the 'load' method after creating the user in the database.
        :param database: Workspace Login Database in which the project is added
        :param project_name: Unique name for the project @Todo - Perhaps remove unique qualifier
        :param project_description: Description of the project that includes additional details that help distinguish
        this particular project from any other
        :param project_type: num value that defines this project's type out of the available options
        :return: Project object of the projected just added to the database
        """
        my_cursor = database.cursor()
        sql_create_command = "INSERT INTO projects (project_name, project_description, project_type) " \
                             "VALUES (%s, %s, %s)"
        select_data = (project_name, project_description, project_type.value)
        my_cursor.execute(sql_create_command, select_data)
        database.commit()

        return Project.load(database, project_name)

    @staticmethod
    def load(database: mysql.connector, project_name: str):
        """
        Method to load a user from the database. Static method so that it can be call independently of a specific
        object.
        @ToDo - Perhaps split this into two load methods, a "load last" method and a "load" that uses an id, allows project names to no longer be unique
        :param database: Workspace Login Database from which the project is loaded
        :param project_name: Name of the project in question
        :return: Project object with the project name requested
        """
        my_cursor = database.cursor()
        sql_load_command = "SELECT * FROM projects WHERE project_name = %s"
        my_cursor.execute(sql_load_command, (project_name,))
        record = my_cursor.fetchone()

        project = Project(record[0], record[1], record[2], ProjectType[record[3]])

        return project
