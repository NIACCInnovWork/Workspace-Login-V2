"""
NIACC Innovation Workspace Login V2
This file defines the 'User' class and the associate 'User_Type' enum.
Author: Anthony Riesen
"""

from enum import Enum
import datetime as dt
import mysql.connector


class UserType(Enum):
    """
    A user (visitor) will be one of several categories of users. This enum lists out these
    options
    """
    Student = 1
    Staff = 2
    Entrepreneur = 3
    Business_Member = 4
    Community_Member = 5


class User:
    """
    A User (visitor) is someone who comes to the makerspace in order to work on projects.

    A user has name and other identifying information, a type, and a date joined.
    """
    def __init__(
            self, 
            user_id: int, 
            date_joined: dt.datetime, 
            name: str, 
            user_type: UserType
    ):
        """
        Constructor for 'User' class

        Users shoud *never* be constructed directly (with the exception of crating testing data).
        Instead, users should only be fetched from the UserRepostiory using one of the query 
        methods or created by invoking the 'create' method on the UserRepository.

        :param user_id: Unique identifier for each user, generated by the database
        :param date_joined: Timestamp that records the date and time the user first logged in
        :param name: Full name of the user, uniqueness is enforced so clients can search by name
        :param user_type: Enum value that defines this user's type out of the available options
        """
        self.user_id = user_id
        self.date_joined = date_joined
        self.name = name
        self.user_type = user_type

    def __str__(self):
        """
        Overrides the Print() functionality for the user to more cleanly output the object to 
        the terminal

        :return: printout to terminal
        """
        return f"User: userID: {self.user_id}, name: {self.name}, " \
               f"timeStamp: {self.date_joined}, userType: {self.user_type}"


class UserRepository:
    def __init__(self, conn: mysql.connector.MySQLConnection):
        self.conn = conn

    def create(self, name: str, user_type: UserType):
        """
        Constructs a new user object from the supplied parameters and inserts it into the database

        :param name: Full name of the user being added
        :param user_type: Enum that defines the user's type
        :return: Newly constructed user
        """
        # Prepare Data for Database
        date_joined = dt.datetime.now()
        curr = self.conn.cursor()
        sql_create_command = "INSERT INTO users (date_joined, name, user_type) VALUES (%s, %s, %s)"
        curr.execute(sql_create_command, (date_joined, name, user_type.value))
        self.conn.commit()  # End of Transaction
        curr.close()

        return User(curr.lastrowid, date_joined, name, user_type)

    def load_by_name(self, name: str):
        """
        Method to load a user from the database. Static method so that it can be called 
        independent of a specific object.  Deprecated Method actively being removed.

        :param name: Full name of the user being loaded
        :return: User object with the full name requested
        """
        curr = self.conn.cursor()
        sql_load_command = "SELECT * FROM users WHERE name = %s"
        curr.execute(sql_load_command, (name,))
        record = curr.fetchone()

        user = User(record[0], record[1], record[2], UserType[record[3]])

        return user

    def load(self, user_id: int):
        """
        Method to load a user from the database by their user_id.  Designed to replace 
        load_by_name method above.

        :param user_id: Primary key for the user being loaded
        :return: User object with the user_id provided
        """
        my_cursor = self.conn.cursor()
        sql_load_command = "SELECT * FROM users WHERE user_id = %s"
        my_cursor.execute(sql_load_command, (user_id,))
        record = my_cursor.fetchone()
        if record is None:
            return None
        user = User(record[0], record[1], record[2], UserType[record[3]])

        return user

    def get_all_visitors(self):
        """
        Method to select all visitors from the database.
        :param database: Workspace Login Database from which the user is loaded
        :return: List of users and user_ids
        """
        my_cursor = self.conn.cursor()
        sql_load_names_command = "SELECT name, user_id FROM users"
        my_cursor.execute(sql_load_names_command)

        return my_cursor.fetchall()


